using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

namespace MalwaresFeatures
{
	public abstract class MalwareFeature : Feature
	{	public enum FeatureType 
        {
			FT_PROPAGATES,
            FT_COMPROMISSION_PER_SECOND,
            FT_PAYMENT_REQUIRED,
            FT_TRIGGERED,
            FT_BLOCKS_ANTIVIRUS,
            FT_BLOCKS_FIREWALL,
            FT_BLOCKS_IDPS
		}

		public MalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
		{
		}
	}

	public class PropagatesMalwareFeature : MalwareFeature
	{

        public PropagatesMalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
        {
        }

		public override void performeModifier(Modifier m)
        {
            this.currentValue = bool.Parse(m.m_fFactor);

        }

        public override void removeModifier(Modifier m)
        {
            this.currentValue = !(bool)this.currentValue;

        }
       
        public override void applyFactor(System.Object factor)
        {
            this.currentValue = (bool)factor;
        }

        public override System.Object updateFactor(System.Object factor)
        {
            return currentValue;
        }

        public override System.Object initializeFactor()
        {
            return false;
        }
	}

    public class CompromissionPerSecondMalwareFeature : MalwareFeature
    {
        public CompromissionPerSecondMalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
        {
        }

        public override void performeModifier(Modifier m)
        {
            this.currentValue = (float)currentValue + float.Parse(m.m_fFactor);

        }

        public override void removeModifier(Modifier m)
        {
            this.currentValue = (float)currentValue - float.Parse(m.m_fFactor);

        }

        public override void applyFactor(System.Object factor)
        {
            this.currentValue = (float)this.baseValue + (float)factor;
        }

        public override System.Object updateFactor(System.Object factor)
        {
            return (float)factor + (float)currentValue;
        }

        public override System.Object initializeFactor()
        {
            return 0.0f;
        }


    }

    public class PaymentRequiredMalwareFeature : MalwareFeature
    {

        public PaymentRequiredMalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
        {
        }

        public override void performeModifier(Modifier m)
        {
            this.currentValue = (int)currentValue + int.Parse(m.m_fFactor);

        }

        public override void removeModifier(Modifier m)
        {
            this.currentValue = (int)currentValue - int.Parse(m.m_fFactor);

        }
        public override void applyFactor(System.Object factor)
        {
            this.currentValue = (int)this.baseValue + (int)factor;
        }

        public override System.Object updateFactor(System.Object factor)
        {
            return (int)factor + (int)currentValue;
        }

        public override System.Object initializeFactor()
        {
            return 0;
        }
    }

    public class TriggeredMalwareFeature : MalwareFeature
    {

        public TriggeredMalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
        {
        }

        public override void performeModifier(Modifier m)
        {
            this.currentValue = bool.Parse(m.m_fFactor);

        }

        public override void removeModifier(Modifier m)
        {
            this.currentValue = !(bool)this.currentValue;

        }
       
        public override void applyFactor(System.Object factor)
        {
            this.currentValue = (bool)factor;
        }

        public override System.Object updateFactor(System.Object factor)
        {
            return currentValue;
        }

        public override System.Object initializeFactor()
        {
            return false;
        }
    }

    public class BlocksAntiVirusMalwareFeature : MalwareFeature
    {
        public BlocksAntiVirusMalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
        {
        }
        public override void performeModifier(Modifier m)
        {
            this.currentValue = bool.Parse(m.m_fFactor);

        }

        public override void removeModifier(Modifier m)
        {
            this.currentValue = !(bool)this.currentValue;

        }
       
        public override void applyFactor(System.Object factor)
        {
            this.currentValue = (bool)factor;
        }

        public override System.Object updateFactor(System.Object factor)
        {
            return currentValue;
        }

        public override System.Object initializeFactor()
        {
            return false;
        }
    }

    public class BlocksFirewallMalwareFeature : MalwareFeature
    {
        public BlocksFirewallMalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
        {
        }

        public override void performeModifier(Modifier m)
        {
            this.currentValue = bool.Parse(m.m_fFactor);

        }

        public override void removeModifier(Modifier m)
        {
            this.currentValue = !(bool)this.currentValue;

        }
       
        public override void applyFactor(System.Object factor)
        {
            this.currentValue = (bool)factor;
        }

        public override System.Object updateFactor(System.Object factor)
        {
            return currentValue;
        }

        public override System.Object initializeFactor()
        {
            return false;
        }
    }

    public class BlocksIDPSMalwareFeature : MalwareFeature
    {
        public BlocksIDPSMalwareFeature(System.Object baseValue, FeatureType featureName) : base(baseValue, featureName)
        {
        }
        public override void performeModifier(Modifier m)
        {
            this.currentValue = bool.Parse(m.m_fFactor);

        }

        public override void removeModifier(Modifier m)
        {
            this.currentValue = !(bool)this.currentValue;

        }
       
        public override void applyFactor(System.Object factor)
        {
            this.currentValue = (bool)factor;
        }

        public override System.Object updateFactor(System.Object factor)
        {
            return currentValue;
        }

        public override System.Object initializeFactor()
        {
            return false;
        }
    }




}