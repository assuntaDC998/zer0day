using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;
using MalwaresFeatures;

[Serializable]
public class MalwaresFeaturesJsonMap:Dictionable
{

    private bool FT_PROPAGATES;
    private float FT_COMPROMISSION_PER_SECOND;
    private int FT_PAYMENT_REQUIRED;
    private bool FT_TRIGGERED;
    private bool FT_BLOCKS_ANTIVIRUS;
    private bool FT_BLOCKS_FIREWALL;
    private bool FT_BLOCKS_IDPS;

    public Dictionary<System.Object, Feature> todict()
    {

        if (FT_COMPROMISSION_PER_SECOND < 0 ) throw new DataException("Compromission rate could not be negative");
        if (FT_PAYMENT_REQUIRED < 0 ) throw new DataException("Compromission rate could not be negative");


        Dictionary<System.Object, Feature> newDict = new Dictionary<System.Object, Feature>();
        newDict.Add(MalwareFeature.FeatureType.FT_PROPAGATES, new PropagatesMalwareFeature(FT_PROPAGATES, MalwareFeature.FeatureType.FT_PROPAGATES));
        newDict.Add(MalwareFeature.FeatureType.FT_COMPROMISSION_PER_SECOND, new CompromissionPerSecondMalwareFeature(FT_COMPROMISSION_PER_SECOND, MalwareFeature.FeatureType.FT_COMPROMISSION_PER_SECOND));
        newDict.Add(MalwareFeature.FeatureType.FT_PAYMENT_REQUIRED, new PaymentRequiredMalwareFeature(FT_PAYMENT_REQUIRED, MalwareFeature.FeatureType.FT_PAYMENT_REQUIRED));
        newDict.Add(MalwareFeature.FeatureType.FT_TRIGGERED, new TriggeredMalwareFeature(FT_TRIGGERED, MalwareFeature.FeatureType.FT_TRIGGERED));
        newDict.Add(MalwareFeature.FeatureType.FT_BLOCKS_ANTIVIRUS, new BlocksAntiVirusMalwareFeature(FT_BLOCKS_ANTIVIRUS, MalwareFeature.FeatureType.FT_BLOCKS_ANTIVIRUS));
        newDict.Add(MalwareFeature.FeatureType.FT_BLOCKS_FIREWALL, new BlocksFirewallMalwareFeature(FT_BLOCKS_FIREWALL, MalwareFeature.FeatureType.FT_BLOCKS_FIREWALL));
        newDict.Add(MalwareFeature.FeatureType.FT_BLOCKS_IDPS, new BlocksIDPSMalwareFeature(FT_BLOCKS_IDPS, MalwareFeature.FeatureType.FT_BLOCKS_IDPS));

        return newDict;
    }

}
